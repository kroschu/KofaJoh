import os
import telebot
from dotenv import load_dotenv
from telebot import *
import button
import requests
import sqlite3
#import re

load_dotenv()
secure_chat_id = os.getenv('SECURE')
token = os.getenv('TOKEN')
office = os.getenv('OFFICE')
it_adm = os.getenv('IT_ADM')
bot = telebot.TeleBot(token)
api_mts_key = os.getenv('API_MTS_KEY')
number_mts = os.getenv('NUMBER')
number_1 = os.getenv('NUMBER_1')
number_2 = os.getenv('NUMBER_2')

menu = ['üíª –¢–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∞',['admin'],'üìö –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è',['start'],'ü§ñ','üÜô –û—Ñ–∏—Å 2 üëë','üÜô –û—Ñ–∏—Å 1 ‚öôÔ∏è','üîª –û—Ñ–∏—Å 2 üëë','üîª –û—Ñ–∏—Å 1 ‚öôÔ∏è','‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏','‚ùåCLOSE‚ùå','üñ• –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É','üëà –Ω–∞–∑–∞–¥','–ü–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞ –æ—Ö—Ä–∞–Ω—É üëÆ‚Äç‚ôÄÔ∏è','–ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–Ω—è—Ç–∏–µ —Å –æ—Ö—Ä–∞–Ω—ã ‚ö°Ô∏è']

@bot.message_handler(commands=['admin']) # admin –ø–∞–Ω–µ–ª—å
def admin(message):
    if message.chat.title == 'Telegram Group Name IT':
        bot.send_message(chat_id=it_adm, text=f'–î–æ–±—Ä—ã–π –¥–µ–Ω—å!\n–í—ã –≤ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n–ß—Ç–æ –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ?\n', reply_markup=button.markup_admin())
    else:
        bot.send_message(message.chat.id,'–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä—Ç–æ—Ä–æ–º', reply_markup=button.markup_start())

@bot.message_handler(commands=['start']) # –∫–Ω–æ–ø–∫–∞ Start
def start(message):
    bot.send_message(message.chat.id, f"üëã –ü—Ä–∏–≤–µ—Ç,{message.from_user.first_name}!  –Ø –±–æ—Ç Digniori Arts", reply_markup=button.markup_start())
    bot.send_message(message.chat.id, '‚ùì –í—ã–±–µ—Ä–µ—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –í–∞—Å —Ä–∞–∑–¥–µ–ª', reply_markup=button.markup_main())

@bot.message_handler(commands=['close']) # –∫–Ω–æ–ø–∫–∞ close
def close(message):
    bot.send_message(message.chat.id, 'Goodbye', reply_markup=None)


@bot.message_handler(func=lambda message: True, content_types=['audio', 'photo', 'voice', 'video', 'document', 'text', 'location', 'contact', 'sticker'])
def get_text_messages(message):
    
    
     ##########################     START      ##############################
    
    if message.text == 'üëã':
        bot.send_message(message.chat.id, ' –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.\n‚ùì –í—ã–±–µ—Ä–µ—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –í–∞—Å —Ä–∞–∑–¥–µ–ª', parse_mode='HTML', reply_markup=button.markup_main())
    
    elif message.text == 'üëà –Ω–∞–∑–∞–¥':    
        bot.send_message(message.chat.id, 'üëã', reply_markup=button.markup_main())  
    
     ##########################      MAIN      ##############################
    
    elif message.text == 'ü§ñ':
        if message.chat.title == 'Telegram Group Name IT Secure':
            bot.send_message(chat_id=secure_chat_id, text=f'–î–æ–±—Ä—ã–π –¥–µ–Ω—å!\n–í—ã –≤ –º–µ–Ω—é –æ—Ö—Ä–∞–Ω—ã.\n–ß—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–¥–µ–ª–∞—Ç—å?\n', reply_markup=button.markup_secure())
        else:
            bot.send_message(message.chat.id,'–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—É—é —Ñ—É–Ω—É—Ü–∏—é...\n–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.', reply_markup=button.markup_start())

    elif message.text == '‚ùåCLOSE‚ùå':
        bot.send_message(message.chat.id, 'Goodbye', reply_markup=button.markup_start())

    elif message.text == 'üíª –¢–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∞':
        bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–º–µ–Ω—é', reply_markup=button.markup_it())
        

    elif message.text == 'üìö –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è':
        bot.send_message(message.chat.id, '–ü–æ–¥—Ä–æ–±–Ω–æ –ø—Ä–æ –∫–æ–º–ø–∞–Ω–∏–∏—é –ø–æ ' + '[—Å—Å—ã–ª–∫–µ](https://ya.ru/)', parse_mode='Markdown')
        bot.send_message(message.chat.id, '–û–±–ª–∞—á–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ ' + '[—Å—Å—ã–ª–∫–µ](https://cloud.ya.ru/)', parse_mode='Markdown')

     ##########################      SECURE     ##############################
    elif message.text == '–ü–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞ –æ—Ö—Ä–∞–Ω—É üëÆ‚Äç‚ôÄÔ∏è':
        bot.send_message(chat_id=secure_chat_id, text=f'–ö–∞–∫–æ–π –æ–±—ä–µ–∫—Ç, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞ –æ—Ö—Ä–∞–Ω—É???', reply_markup=button.markup_up())
               
    elif message.text == '–ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–Ω—è—Ç–∏–µ —Å –æ—Ö—Ä–∞–Ω—ã ‚ö°Ô∏è':
        bot.send_message(chat_id=secure_chat_id, text=f'–ö–∞–∫–æ–π –æ–±—ä–µ–∫—Ç, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–Ω—è—Ç—å —Å –æ—Ö—Ä–∞–Ω—ã???', reply_markup=button.markup_down())


    elif message.text == 'üÜô –û—Ñ–∏—Å 1 ‚öôÔ∏è':
        try:
            headers = {
                'Authorization': f'{api_mts_key}',
                'Content-Type': 'application/json',
            }
            data = {"number": f"{number_mts}", "destination": f"{number_1}", "text" : "O1"}
            requests.post('https://api.exolve.ru/messaging/v1/SendSMS', headers=headers, json=data)

            bot.send_message(chat_id=secure_chat_id, text=f'–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –æ—Ö—Ä–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –≤–∫–ª—é—á–µ–Ω–∞.\n–£ –í–∞—Å –µ—Å—Ç—å 15 —Å–µ–∫ –ø–æ–∫–∏–Ω—É—Ç—å –ø–æ–º–µ—â–µ–Ω–∏–µ.', reply_markup=button.markup_start())
            bot.send_message(chat_id=secure_chat_id, text=f'üëÆ‚Äç‚ôÄÔ∏è', reply_markup=button.markup_main())
            bot.send_message(chat_id=office, text=f'C–æ—Ç—Ä—É–¥–Ω–∏–∫ {message.from_user.first_name}, —É—à–µ–ª. \n–í–∫–ª—é—á–µ–Ω–∞ —Å–∏–≥–Ω–∞–ª–∏–∑–∞—Ü–∏—è –≤ –û—Ñ–∏—Å–µ 1 ‚öôÔ∏è.\nNikname:@{message.from_user.username}', parse_mode='Markdown')
        
        except Exception as e:  
            bot.send_message(message.chat.id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞... –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.', reply_markup=button.markup_start())


    elif message.text == 'üîª –û—Ñ–∏—Å 1 ‚öôÔ∏è':
        #try:
        headers = {
            'Authorization': f'{api_mts_key}',
            'Content-Type': 'application/json',
        }

        data = {"number": f"{number_mts}", "destination": f"{number_1}", "text" : "O0"}
        requests.post('https://api.exolve.ru/messaging/v1/SendSMS', headers=headers, json=data)

        bot.send_message(chat_id=secure_chat_id, text=f'–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –æ—Ö—Ä–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –±—É–¥–µ—Ç –≤—ã–∫–ª—é—á–µ–Ω–∞.\n–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è 20 —Å–µ–∫.', reply_markup=button.markup_main())
        bot.send_message(chat_id=secure_chat_id, text=f'üëå –°–∏–≥–Ω–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞', reply_markup=button.markup_main())
        bot.send_message(chat_id=office, text=f'C–æ—Ç—Ä—É–¥–Ω–∏–∫ {message.from_user.first_name}, –æ—Ç–∫–ª—é—á–∏–ª —Å–∏–≥–Ω–∞–ª–∏–∑–∞—Ü–∏—é –≤ –û—Ñ–∏—Å–µ 1 ‚öôÔ∏è.\nNikname:@{message.from_user.username}', parse_mode='Markdown')
    
        # except Exception as e:  
        #     bot.send_message(message.chat.id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞... –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.', reply_markup=button.markup_start())


    elif message.text == 'üÜô –û—Ñ–∏—Å 2 üëë':
        try:
            headers = {
                'Authorization': f'{api_mts_key}',
                'Content-Type': 'application/json',
            }
            data = {"number": f"{number_mts}", "destination": f"{number_2}", "text" : "O1"}
            requests.post('https://api.exolve.ru/messaging/v1/SendSMS', headers=headers, json=data)          
                        
            bot.send_message(chat_id=office, text=f'''C–æ—Ç—Ä—É–¥–Ω–∏–∫ {message.from_user.first_name}, —É—à–µ–ª. \n–ù–∞–ø—Ä–∞–≤–ª–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–∫–ª—é—á–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ –≤ –û—Ñ–∏—Å–µ 2 üëë.\nNikname:@{message.from_user.username}''', parse_mode='Markdown')
            bot.send_message(chat_id=secure_chat_id, text=f'–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –æ—Ö—Ä–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –≤–∫–ª—é—á–µ–Ω–∞.\n–£ –í–∞—Å –µ—Å—Ç—å 15 —Å–µ–∫ –ø–æ–∫–∏–Ω—É—Ç—å –ø–æ–º–µ—â–µ–Ω–∏–µ.')
            bot.send_message(chat_id=secure_chat_id, text=f'üëÆ‚Äç‚ôÄÔ∏è', reply_markup=button.markup_main())
        
        except Exception as e:  
            bot.send_message(message.chat.id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞... –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.', reply_markup=button.markup_start())

         
    elif message.text == 'üîª –û—Ñ–∏—Å 2 üëë':
        try:    
            headers = {
                    'Authorization': f'{api_mts_key}',
                    'Content-Type': 'application/json',
                }
            data = {"number": f"{number_mts}", "destination": f"{number_2}", "text" : "O0"}
            requests.post('https://api.exolve.ru/messaging/v1/SendSMS', headers=headers, json=data)
            
            bot.send_message(chat_id=secure_chat_id, text=f'–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –æ—Ö—Ä–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –±—É–¥–µ—Ç –≤—ã–∫–ª—é—á–µ–Ω–∞.\n–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è 20 —Å–µ–∫.')
            bot.send_message(chat_id=secure_chat_id, text=f'üëå –°–∏–≥–Ω–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞', reply_markup=button.markup_main())
            bot.send_message(chat_id=office, text=f'C–æ—Ç—Ä—É–¥–Ω–∏–∫ {message.from_user.first_name}, –æ—Ç–∫–ª—é—á–∏–ª —Å–∏–≥–Ω–∞–ª–∏–∑–∞—Ü–∏—é –≤ –û—Ñ–∏—Å–µ 2 üëë.\nNikname:@{message.from_user.username}', parse_mode='Markdown')
        
        except Exception as e:  
            bot.send_message(message.chat.id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞... –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.', reply_markup=button.markup_start())


    ##########################    USER_TASKS    ##############################

    elif message.text == '‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏':
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –í–∞—à–µ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è:', reply_markup=button.markup_it())
        bot.register_next_step_handler(message, stat_user_tasks)

    
    elif message.text == 'üñ• –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É':    
        bot.send_message(message.chat.id, f'{message.from_user.first_name}, –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –∏ –æ–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É:')
        bot.register_next_step_handler(message, add_task)


     ##########################    ADMIN_!!!    ##############################

    elif message.text == '–°–ø–∏—Å–∫–∏ –∑–∞–¥–∞—áüìÑ':
        bot.send_message(chat_id=it_adm, text=f'–ö–∞–∫–æ–π —Å–ø–∏—Å–æ–∫ –í–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?', reply_markup=button.markup_task_l())
        
    elif message.text == 'üñä –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å':
        bot.send_message(chat_id=it_adm, text=f'–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞', reply_markup=button.markup_admin())
        bot.register_next_step_handler(message, stat_task)

    elif message.text == '‚õîÔ∏è–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É‚õîÔ∏è':
        bot.send_message(chat_id=it_adm, text=f'–í–ù–ò–ú–ê–ù–ò–ï\n–£–¥–∞–ª–µ–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã –∑–∞–¥–∞—á–∏ –Ω–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å!\n–ï—Å–ª–∏ –≤—ã —É–≤–µ—Ä–µ–Ω—ã, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏.', reply_markup=button.markup_admin())
        bot.register_next_step_handler(message, del_task)

     ##########################    ADMIN_TASKS    ##############################       
        
    elif message.text == '–í—Å–µ –∑–∞–¥–∞—á–∏ üìÑ':
        
# –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –∑–∞–¥–∞—á —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏
        
        try:
            connection = sqlite3.connect('./requests.db')
            cursor = connection.cursor()
            cursor.execute('SELECT * FROM request')
            tasks = cursor.fetchall()
            su = str('')
            for task in tasks:
                s1 = f' \t\t –û–±—Ä–∞—â–µ–Ω–∏–µ ‚Ññ {task[0]} \n–û—Ç: @{task[1]}. \n–ø—Ä–æ–±–ª–µ–º–∞:\n{task[2]}\n–°—Ç–∞—Ç—É—Å: {task[3]}\n\n'
                su = su + s1
                s1 = ''
            connection.close()
            bot.send_message(chat_id=it_adm, text=f'{su}', parse_mode='HTML')
            bot.send_message(chat_id=it_adm, text=f'–ì–æ—Ç–æ–≤–æ!', reply_markup=button.markup_task_l())
        
        except Exception as e:
            bot.send_message(chat_id=it_adm, text=f'–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç.', reply_markup=button.markup_task_l())

      
    elif message.text == '‚ùóÔ∏è –ê–∫—Ç–∏–≤–Ω—ã–µ':
        
# –ü—Ä–æ—Å–º–æ—Ç—Ä –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏

        try:
            connection = sqlite3.connect('./requests.db')
            cursor = connection.cursor()
            cursor.execute('SELECT * FROM request')
            tasks = cursor.fetchall()
            ac = str('')
            for task in tasks:
                if task[3] == '–í —Ä–∞–±–æ—Ç–µ':
                    a1 = f' \t\t –û–±—Ä–∞—â–µ–Ω–∏–µ ‚Ññ {task[0]} \n–û—Ç: @{task[1]}. \n–ø—Ä–æ–±–ª–µ–º–∞:\n{task[2]}\n–°—Ç–∞—Ç—É—Å: {task[3]}\n\n'
                    ac = ac + a1
                    a1 = ''                
                else:
                    continue

            connection.close()
            bot.send_message(chat_id=it_adm, text=f'{ac}', parse_mode='HTML')
            bot.send_message(chat_id=it_adm, text=f'–ì–æ—Ç–æ–≤–æ!', reply_markup=button.markup_task_l())
        except Exception as e:  
            bot.send_message(chat_id=it_adm, text=f'–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç. –í—ã –æ—Ç–ª–∏—á–Ω–æ –ø–æ—Ä–∞–±–æ–æ—Ç–∞–ª–∏!', reply_markup=button.markup_task_l())

    
    elif message.text == '‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ':
        connection = sqlite3.connect('./requests.db')
        cursor = connection.cursor()
        try:
            connection = sqlite3.connect('./requests.db')
            cursor = connection.cursor()
            cursor.execute('SELECT * FROM request')
            tasks = cursor.fetchall()
            da = str('')
            for task in tasks:
                if task[3] != '–í —Ä–∞–±–æ—Ç–µ':
                    d1 = f' \t\t –û–±—Ä–∞—â–µ–Ω–∏–µ ‚Ññ {task[0]} \n–û—Ç: @{task[1]}. \n–ø—Ä–æ–±–ª–µ–º–∞:\n{task[2]}\n–°—Ç–∞—Ç—É—Å: {task[3]}\n\n'
                    da = da + d1
                    d1 = ''         
                else:
                    continue
            connection.close()
            bot.send_message(chat_id=it_adm, text=f'{da}', parse_mode='HTML')
            bot.send_message(chat_id=it_adm, text=f'–ì–æ—Ç–æ–≤–æ!', reply_markup=button.markup_task_l())

        except Exception as e:  
            bot.send_message(chat_id=it_adm, text=f'–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç.', reply_markup=button.markup_task_l())


    elif message.text == 'üëà admin menu':
        bot.send_message(chat_id=it_adm, text='–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞...', reply_markup=button.markup_admin())


# –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏

def del_task(message):
 
    try:
        if message.text in menu:

            get_text_messages(message)     
            
        else:
            connection = sqlite3.connect('./requests.db')
            cursor = connection.cursor()

            try:
                del_id = int(message.text)
                cursor.execute('SELECT * FROM request')
                tasks = cursor.fetchall()
                try:
                    for task in tasks:
                    
                        if task[0] == del_id:
                            cursor.execute('DELETE FROM request WHERE id = ?', (del_id,))
                            connection.commit()
                            bot.send_message(chat_id=it_adm, text=f' \t –û–±—Ä–∞—â–µ–Ω–∏–µ ‚Ññ {task[0]} \n–û—Ç: {task[1]}. \n–ø—Ä–æ–±–ª–µ–º–∞:\n{task[2]}\n –°—Ç–∞—Ç—É—Å: {task[3]}\n–£–î–ê–õ–ï–ù–û!‚úîÔ∏è\n', reply_markup=button.markup_admin())
                            raise StopIteration
                        
                        else:
                            continue
                        
                    else:
                        bot.send_message(chat_id=it_adm, text='!–ù–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–¥–µ–Ω –Ω–æ–º–µ—Ä!\n–ù–∞–∂–º–∏—Ç–µ "‚õîÔ∏è–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É‚õîÔ∏è" –∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä.' , reply_markup=button.markup_admin())  

                except StopIteration:
                    pass    
            
            except (SyntaxError, ValueError):
                bot.send_message(chat_id=it_adm, text='–í—ã –Ω–µ –≤–≤–µ–ª–∏ –Ω–æ–º–µ—Ä...\n–ù–∞–∂–º–∏—Ç–µ "‚õîÔ∏è–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É‚õîÔ∏è" –∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä.', reply_markup=button.markup_admin())  

            connection.close()

    except Exception as e:  
        bot.send_message(chat_id=it_adm, text='–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞... –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.\n–ù–∞–∂–º–∏—Ç–µ "‚õîÔ∏è–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É‚õîÔ∏è" –∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä.', reply_markup=button.markup_admin())


# –§—É–Ω–∫—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏
        
def stat_task(message):
    try:
            if message.text in menu:

                get_text_messages(message)     
                
            else:
                connection = sqlite3.connect('./requests.db')
                cursor = connection.cursor()

                try:
                    stat_task_adm = int(message.text)
                    cursor.execute('SELECT * FROM request')
                    tasks = cursor.fetchall()
                    try:
                        for task in tasks:
                        
                            if task[0] == stat_task_adm:
                                cursor.execute('UPDATE request SET status = ? WHERE id = ?', ('–í—ã–ø–æ–ª–Ω–µ–Ω–æ!', stat_task_adm))
                                connection.commit()
                                bot.send_message(chat_id=it_adm, text=f' \t –û–±—Ä–∞—â–µ–Ω–∏–µ ‚Ññ {task[0]} \n–û—Ç: {task[1]}. \n–ø—Ä–æ–±–ª–µ–º–∞:\n{task[2]}\n –°—Ç–∞—Ç—É—Å: {task[3]}\n\n üîù–°—Ç–∞—Ç—É—Å –û–ë–ù–û–í–õ–ï–ù!üîù', reply_markup=button.markup_admin())
                                raise StopIteration
                            
                            else:
                                continue
                            
                        else:
                            bot.send_message(chat_id=it_adm, text=f'!–ù–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–¥–µ–Ω –Ω–æ–º–µ—Ä!\n–ù–∞–∂–º–∏—Ç–µ "üñä –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å" –∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä.' , reply_markup=button.markup_admin())  

                    except StopIteration:
                        pass    
                
                except (SyntaxError, ValueError):
                    bot.send_message(chat_id=it_adm, text=f'–í—ã –Ω–µ –≤–≤–µ–ª–∏ –Ω–æ–º–µ—Ä...\n–ù–∞–∂–º–∏—Ç–µ "üñä –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å" –∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä.', reply_markup=button.markup_admin())  

                connection.close()

    except Exception as e:  
        bot.send_message(chat_id=it_adm, text=f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞... –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.\n–ù–∞–∂–º–∏—Ç–µ "üñä –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å" –∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä.', reply_markup=button.markup_admin())


# –§—É–Ω–∫—Ü–∏—è –≤—ã–≤–æ–¥–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        
def stat_user_tasks(message):
  
    try:
        if message.text in menu:

            get_text_messages(message)     
            
        else:
            connection = sqlite3.connect('./requests.db')
            cursor = connection.cursor()

            try:
                nomber = int(message.text)
                cursor.execute('SELECT * FROM request')
                tasks = cursor.fetchall()
                try:
                    for task in tasks:
                    
                        if task[0] == nomber:
                            bot.send_message(message.chat.id, f' \t –û–±—Ä–∞—â–µ–Ω–∏–µ ‚Ññ {task[0]} \n–û—Ç: {task[1]}. \n–ø—Ä–æ–±–ª–µ–º–∞:\n{task[2]}\n –°—Ç–∞—Ç—É—Å: {task[3]}\n\n', reply_markup=button.markup_it())
                            raise StopIteration
                        
                        else:
                            continue
                        
                    else:
                        bot.send_message(message.chat.id,'!–ù–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–¥–µ–Ω –Ω–æ–º–µ—Ä!\n–ù–∞–∂–º–∏—Ç–µ "‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏" –∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä.' , reply_markup=button.markup_it())  

                except StopIteration:
                    pass    
            
            except (SyntaxError, ValueError):
                bot.send_message(message.chat.id,'–í—ã –Ω–µ –≤–≤–µ–ª–∏ –Ω–æ–º–µ—Ä...\n–ù–∞–∂–º–∏—Ç–µ "‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏" –∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä.', reply_markup=button.markup_it())  

            connection.close()

    except Exception as e:  
        bot.send_message(message.chat.id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞... –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.\n–ù–∞–∂–º–∏—Ç–µ "‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏" –∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä.', reply_markup=button.markup_it())

  
#–§—É–Ω–∫—Ü–∏—è –≤–Ω–µ—Å–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º

def add_task(message): 
        
    try:
        if message.text in menu:

            get_text_messages(message)     
            
        else:
                       
            connection = sqlite3.connect('./requests.db')
            cursor = connection.cursor()

                # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É request
            cursor.execute('''
            CREATE TABLE IF NOT EXISTS request (
            id INTEGER PRIMARY KEY,
            username TEXT,
            example TEXT,
            status TEXT DEFAULT '–í —Ä–∞–±–æ—Ç–µ'
            )
            ''')


            cursor.execute('INSERT INTO request (username, example, status) VALUES (?, ?, ?)', (message.from_user.username, message.text, '–í —Ä–∞–±–æ—Ç–µ'))
            connection.commit()

            last_id = cursor.lastrowid
            connection.close()

            bot.send_message(message.chat.id, f'–ù–æ–º–µ—Ä –í–∞—à–µ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è: {last_id} \n–°–ø–∞—Å–∏–±–æ!\n\n–ü–æ –Ω–æ–º–µ—Ä—É –æ–±—Ä–∞—â–µ–Ω–∏—è –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å.', reply_markup=button.markup_it())
            bot.send_message(chat_id=it_adm, text=f'{message.from_user.first_name} –æ—Å—Ç–∞–≤–∏–ª –∑–∞—è–≤–∫—É: \n{message.text}\nNikname: @{message.from_user.username}', reply_markup=None)

    except Exception as e:  
        bot.send_message(message.chat.id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞... –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.\n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "üñ• –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É" –∏ –≤–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.', reply_markup=button.markup_it())

if __name__ == "__main__":
    # bot.polling(none_stop=True, interval=0)
    while True:
        try:
            bot.polling(none_stop=True)

        except Exception as e:
            logger.error(e)  # –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ print(e) –µ—Å–ª–∏ —É –≤–∞—Å –ª–æ–≥–≥–µ—Ä–∞ –Ω–µ—Ç,
            # –∏–ª–∏ import traceback; traceback.print_exc() –¥–ª—è –ø–µ—á–∞—Ç–∏ –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ—ã
            time.sleep(15)